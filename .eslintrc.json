{
  // eslint는 기본적으로 퓨어자바스크립트를 이해하기 때문에 확장 문법(typescript, jsx) 같은 경우 그에 상응하는 파싱 과정을 거치고 lint 하도록 함
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "parserOptions": {
      //      "sourceType": "module"
      //      "ecmaFeatures": {
      //        "js": true,
      //        "ts": true,
      //        "jsx": true,
      //        "tsx": true
      //      },
      //      // 어떤 버전의 es를 사용할 지, 타겟 디바이스에 따라 설정하면 될 것 같다.
      //      "ecmaVersion": "latest"
    }
  },
  // 여러개의 설정 파일을 사용할 때 필요함. 일종의 scope라 생각하면 될듯. monorepo에서 필요해 보임
  "root": true,
  // 이미 설정돼 있는 eslint 파일을 가져와서 사용하는 것
  "extends": [
    "airbnb",
    "airbnb/hooks",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "eslint-config-prettier",
    "next/core-web-vitals"
  ],
  "globals": {
    "NodeJS": true
  },
  // eslint에서 기본적으로 제공되는 규칙 외에 추가 규칙을 사용할수 있도록 넣어주는 것.
  "plugins": ["@typescript-eslint"],
  // javascript가 어떤 환경에서 동작할 지
  // 전역 객체를 eslint가 인식할수 있게 함.
  // globalThis도 있지만 명시적이지 않다. 어떤 오류가 발생할지 모름.
  "env": {
    // window, document 등
    "browser": true,
    // global 등.
    "node": true,
    "jasmine": true,
    "jest": true
  },
  "settings": { // eslint plugin 추가 설정
    // Tells eslint-plugin-react to automatically detect the version of React to use.
    "react": {
      "version": "detect"
    },
    "import/extensions": [".js", ".jsx", ".ts", ".tsx"],
    "import/resolver": {
      "node": {
        "paths": ["src"],
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      },
      "typescript": {
        "project": "."
      }
    }
  },
  // node_modules 폴더나 .로 시작하는(숨긴 파일) 파일 말고도 eslint를 적용 안할 곳을 명시함
  "ignorePatterns": [],
  // # 위에서 설정한 규칙을 좀 더 세세하게 설정할 수 있도록 하는 공간
  // ### option
  // - 0 === "off" : 해당 규칙을 무시한다.
  // - 1 === "warn", : 규칙을 어겼을 때 경고를 한다.
  // - 2 === "error" : 규칙을 어겼을 때 에러를 띄운다.
  "rules": {

    // ## eslint ======== ======== ======== ========
    // site: https://eslint.org/docs/latest/rules

    // arrow func 사용 시 return 키워드 및 중괄호 대신 바로 값을 반환하도록 함
    "arrow-body-style": "off",
    // 클래스 구성원(필드, 메서드) 사이 빈 줄에 대한 규칙
    "lines-between-class-members": "off",
    // 함수 최대 길이(세로) 제한
    //    "max-lines-per-function": ["error", { "max": 12 }],
    // 매개변수 갯수 제한
    "max-params": ["error", 4],
    // 매개변수로 받은 값의 재할당을 막는다.
    "no-param-reassign": ["error", { "props": false }],
    // 단항 연산자(++, --) 사용을 허락하지 않는다.
    "no-plusplus": "off",
    // Object.prototype 메소드 사용을 금지.
    // 이유: https://www.linkedin.com/posts/getify_apologies-for-this-angry-rant-but-its-activity-6961111118924718081-gfte/?utm_source=share&utm_medium=member_desktop
    "no-prototype-builtins": "error",
    // 특정 이름을 가진 값을 내보내기 할수 없게 한다. 뒤에 객체 대신 배열을 사용하고 문자열 값을 넣으면 해당하는 모든 값을 내보내기 이름으로 사용할 수 없다.
    "no-restricted-exports": ["error", { "restrictDefaultExports": { "defaultFrom": false } }],
    // 외부에서 선언된 변수를 덮어 씌우는 변수 선언에 대한 규칙(ex. 함수 안에 item이 있고 그 함수 안에 array 고차 함수를 사용할 때 매개변수 명이 item이면 안됨)
    "no-shadow": "off",
    // 사용하지 않는 표현식에 대한 규칙
    "no-unused-expressions": ["warn"],
    // 쓰지 않는 변수에 대한 규칙 (끄고 IDE의 기능을 이용해도 될 듯)
    "no-unused-vars": "off",
    // 구조분해 할당을 권장하는 규칙
    "prefer-destructuring": ["error", { "object": true, "array": false }],

    // ## typescript-eslint ======== ======== ======== ========
    // site: https://typescript-eslint.io/
    // eslint 옵션 참조
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],

    // ## eslint-plugin-react ======== ======== ======== ========
    // github: https://github.com/jsx-eslint/eslint-plugin-react
    // rules: https://github.com/jsx-eslint/eslint-plugin-react#list-of-supported-rules
    // rules doc: https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules

    // button에 타입을 명시해주는 규칙 (submit, reset, ...)
    "react/button-has-type": "off",
    // 익명 컴포넌트 함수를 허용할지에 대한 규칙.
    "react/display-name": "off",
    // 컴포넌트 선언 식과, 그 컴포넌트의 익명, 기명 여부에 관한 규칙.
    "react/function-component-definition": ["warn", { "namedComponents": "arrow-function" }],
    // JSX 파일 확장자에 대한 규칙.
    "react/jsx-filename-extension": ["error", { "extensions": [".js", ".jsx", ".ts", ".tsx"] }],
    // 하나의 JSX 엘리먼트는 한 줄을 차지한다. 이 규칙을 끄지 않으면 공백({' '})이 한 줄을 차지할 수도 있다.
    "react/jsx-one-expression-per-line": "off",
    // JSX 최대 depth 지정. (들여쓰기, 콜백 지옥을 떠올리면 된다.)
    //    "react/jsx-max-depth": ["warn", { "max":  6 }],
    // 전개 연산자 props를 허용하지 않는 규칙 <MyComponent {...props} />
    "react/jsx-props-no-spreading": "off",
    // 여러줄 JSX를 반환할 때, 중괄호를 붙여주고 따로 분리해 준다. 활성화 시키는 것이 좋지만 prettier에서 해주는 것 같다. 안해준다면 활성화 시키자.
    "react/jsx-wrap-multilines": "off",
    // propTypes에 대한 규칙 (typescrip 체커 도움을 받자.)
    "react/prop-types": "off",
    // jsx 파일 import React from 'react'; 생략을 허용하지 않음.
    "react/react-in-jsx-scope": "off",
    // defaultProps 값 확인 (typescrip 체커 도움을 받자.)
    "react/require-default-props": "off",
    // 태그 안이 비었을때 자동으로 닫는 태그로 바꿈 (<div></div> => <div />, 자동 저장을 활성화 했다면 불편하지만 그게 아니라면 활성화 시키는게 좋아보인다.
    "react/self-closing-comp": "off",

    // ## eslint-plugin-import ======== ======== ======== ========
    // github: https://github.com/import-js/eslint-plugin-import/tree/main
    // rules: https://github.com/import-js/eslint-plugin-import/tree/main/docs/rules

    // 확장명 명시에 대한 규칙
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "js": "never",
        "jsx": "never",
        "ts": "never",
        "tsx": "never"
      }
    ],
    // export default 할 때 익명 값을 허용해 줄 지에 대한 규칙
    "import/no-anonymous-default-export": "off",
    // package.json에 선언되지 않은 외부 모듈의 가져오기에 대한 규칙
    // 테스트나 디자인 시스템을 위해서 허용해줘야하는 부분이 있다.
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": ["**/*.test.tsx", "**/*.stories.*", "**/.storybook/**/*.*", "setupTests.ts"],
        "peerDependencies": true
      }
    ],
    // 파일 경로에 대한 옵션
    "import/no-unresolved": "off",
    // import 순서와 그 모양에 대한 규칙
    // 같은 groups 끼리는 알파벳 오름차순으로 정렬되고 그 그룹간 개행을 설정할 수 있음.
    "import/order": [
      "error",
      {
        // import 되는 순서를 정의함.
        // 생략된 문자열은 마지막 요소와 함께 그룹화 된다.
        // 그룹화 가능한 문자열: builtin, external, internal, unknown, parent, sibling, index, object, type
        "groups": [
          ["external", "builtin"],
          ["type", "internal", "object"],
          ["parent", "sibling", "index"],
          ["unknown"]
        ],
        // 추가적으로 옵션을 설정하고 싶은 경로를 별칭과 함께 다시 그룹화
        // pattern: 경로의 minimatch pattern (https://github.com/motemen/minimatch-cheat-sheet)
        // patternOptions: minimatch를 위한 옵션
        // group: 적용될 그룹의 타입
        // position: 적용될 그룹에 배치될 위치(before, after), 생략할 경우 앞, 뒤가 아닌 그룹과 같이 배치된다.
        "pathGroups": [
          {
            "pattern": "@/lib/**",
            "group": "external"
          },
          {
            "pattern": "{types/*,@/types*,./types}",
            "group": "type"
          },
          {
            "pattern": "{hooks,@/hooks/**/*,./hooks/**,./use**,../use**,../../use**,../../../use**,,../../hooks/**,./_hooks/**,../../../_hooks/**}",
            "group": "internal"
          },
          {
            "pattern": "{utils/**/*,./utils,../utils,../../utils,../../../utils}",
            "group": "type"
          },
          {
            "pattern": "{@/constants/*,./constants}",
            "group": "type"
          },
          {
            "pattern": "{states/**/*,./states*,./**/states*,../states*,../../states*,../../../states*,,../../../../states*,**/**/**/states*}",
            "group": "type"
          },
          {
            "pattern": "@/services/**",
            "group": "type"
          },
          {
            "pattern": "{./helpers,./data,./config,./defaults,../../../defaults}",
            "group": "type"
          },
          {
            "pattern": "{components,components/_common/**,@/components,@/components/**,svgs,@/assets/**/*,@/app/**,routes/**,public/**}",
            "group": "index"
          },
          {
            "pattern": "{styles,./*.scss,../*.scss,../*.module.scss}",
            "group": "index"
          }
        ],
        // 그룹 사이 줄바꿈을 강제화 하거나 금지하는 옵션.
        // ignore, aways, never, always-and-inside-groups
        "newlines-between": "always"
        // pathGroups에서 설정에 의해 처리되지 않는 import type을 정의
        // external 그룹처럼 보이는 pathGroups 옵션을 처리할 때 주로 필요
        //        "pathGroupsExcludedImportTypes": ["react", "unknown"],
      }
    ],
    // 한 파일 + 하나의 내보내기(export) 허용하지 않음.
    "import/prefer-default-export": "off",

    // ## eslint-plugin-jsx-a11y ======== ======== ======== ========
    // github: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y
    // rules: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/main/docs/rules

    // onClick 이벤트가 있을 때 수반 되어야 할 이벤트에 대한 규칙, 접근성과 관련돼 있는거 같다.
    "jsx-a11y/click-events-have-key-events": "off",
    // label 태그가 연결된 엘리먼트(htmlFor 같은)나 컨트롤 엘리먼트가 없다면 에러를 발생시킨다.
    "jsx-a11y/label-has-associated-control": [
      "error",
      {
        "labelComponents": ["label"],
        "labelAttributes": ["htmlFor"],
        "controlComponents": ["input"]
      }
    ]
  },
  // 일부 파일에서 약간 다른 설정을 해주고 싶을 때 사용.
  "overrides": [
    //    {
    //      "files": ["**/__tests__/**/*", "**/*.{spec,test}.*"],
    //      "env": {
    //        "jest/globals": true
    //      },
    //      "plugins": ["jest", "jest-dom", "testing-library"],
    //      "extends": [
    //        "plugin:jest/recommended",
    //        "plugin:jest-dom/recommended",
    //        "plugin:testing-library/react"
    //      ]
    //    }
  ]
}